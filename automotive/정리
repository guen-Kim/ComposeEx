Gnapse - figma
https://www.figma.com/board/lC98MgMQOAiACzNsQTCay7/User-Flows---Stories--Community---%EB%B3%B5%EC%82%AC-?t=AZDVSMCn69x71Azk-1




✅ 지금까지 한 흐름
단계	주제	완료 여부
1주차	@Composable, Column, Row, Modifier, Text, Button	✅
2주차	상태 관리(remember, mutableStateOf), 상호작용, Checkbox	✅
3주차	LazyColumn으로 리스트 만들기 + 체크 기능	✅
💡 보충	mutableStateListOf + 리스트 항목의 상태 추적


앞으로 ..
📘 다음 학습 순서 (중급 진입)
이제부터 화면 구조화 + 앱 다형성 쪽으로 들어갈 차례야:

✅ 4단계: ➕ 항목 추가 기능
TextField와 Button으로 새로운 할 일 입력

리스트에 동적으로 추가

상태를 리스트에 반영

✅ 5단계: 🧠 ViewModel 도입
상태를 Composable 내부가 아니라 ViewModel로 분리

viewModel() 함수 사용법

MVVM 구조 시작

✅ 6단계: 🧭 Navigation (화면 전환)
NavHost, NavController 사용

목록 화면 → 상세 화면 이동

파라미터 전달

✅ 7단계: 🎨 MaterialTheme 커스터마이징
앱 전체 테마 (색상, 폰트, 다크모드 대응 등)

Material3 테마 구조 이해

Typography, ColorScheme 설정

✅ 8단계: 상태 고급편
rememberSaveable – 화면 회전에도 상태 유지

derivedStateOf – 파생 상태 만들기

state hoisting – 상태를 외부로 끌어올려서 재사용 가능하게

* ViewModel 도입
지금까지의 Todo 앱 상태 관리를 Composable 함수 내부에서 해왔지?
이제 그걸 ViewModel로 분리해서
→ 구조를 깔끔하게 만들고,
→ 앱이 회전해도 상태 유지가 되고,
→ 테스트하기도 쉬운 구조로 개선할 거야.

✅ 왜 ViewModel로 바꿔야 해?
문제	ViewModel 도입 후
Composable 안에 모든 상태 있음	Composable은 "화면", ViewModel은 "데이터"
화면 회전 시 상태 초기화됨	ViewModel은 회전해도 살아 있음
재사용 어렵고 확장 어려움	상태 로직을 별도로 관리 가능


✅ 채점 결과
1. @Composable 함수의 특징
너의 답변: "compose api를 사용할 수 있는 함수로 다른 함수와 다르게 Compose 컴포넌트를 활용해 뷰를 그릴 수 있다."
✅ 정답 — 아주 잘 설명했어!
점수: 1점

2. Modifier.padding()과 체이닝
너의 답변: "해당 뷰에 padding을 16dp 만큼 적용하는 역할. 체이닝 순서에 따라 결과가 달라진다."
✅ 정답 — Modifier 체이닝 순서 중요함도 짚었고 설명 좋았어.
점수: 1점

3. TextField vs OutlinedTextField
너의 답변: "이건 안배웠는데?"
🟡 오답 — 둘 다 같은 기능을 하지만, UI 스타일이 다르지. (Outlined는 테두리 있는 스타일)
점수: 0점

4. 상태 코드 수정 문제
kotlin
복사
편집
val text = remember { mutableStateOf("") }

TextField(
    value = text,
    onValueChange = { text = it }
)
너의 답변: "val이 아닌 var로 바꿔야 한다."
❌ 오답 — 문제는 value = text.value 로 써야 했고, text = it이 아니라 text.value = it이 정답이야.
정답 코드:

kotlin
복사
편집
val text = remember { mutableStateOf("") }

TextField(
    value = text.value,
    onValueChange = { text.value = it }
)
점수: 0점

5. remember vs rememberSaveable
너의 답변: "이건 안배웠는데?"
🟡 오답 — rememberSaveable은 화면 회전해도 상태 유지 가능함.
점수: 0점

6. "Todo 아이템을 클릭 → 체크 상태 변경"
너의 답변: "recomposition"
❌ 부분 정답 — recomposition이 일어나야 반영되지만, 핵심은 상태(state) 변경이야.
즉, mutableStateOf나 mutableStateListOf 등을 이용한 상태 기반 UI 업데이트가 핵심이야.
점수: 0.5점

7. LazyColumn vs Column
너의 답변: "LazyColumn은 반복되는 view에 적합, RecyclerView 대체. Column은 단일 View."
✅ 정답 — Lazy는 스크롤 대비 렌더링 최적화가 포인트. Column은 모든 컴포넌트를 즉시 렌더링.
점수: 1점

8. items() 함수 인자
너의 답변: "리스트와 키"
✅ 정답 — items(list, key = { it.id }) {} 같이 key를 쓸 수 있음.
점수: 1점

9. ViewModel에서 상태 반영 안 되는 이유
너의 답변: "모르겠음"
✅ 설명: mutableListOf()는 Compose가 감지 못함.
→ mutableStateListOf() 또는 LiveData, StateFlow 같은 observable한 형태여야 함.
점수: 0점

10. Compose + ViewModel 키워드 3개
너의 답변: "MutableState 사용, 옵저빙"
🟡 부분 정답 — viewModel(), mutableStateOf, collectAsState() 등이 나왔어야 함.
점수: 0.5점

🎯 총점: 5점 / 10점

📌 피드백 요약
항목	평가
개념 이해	👍 기본기는 탄탄함
상태 관리	❗ 더 연습 필요 (.value, mutableStateListOf)
ViewModel 연동	❗ 아직 불안정 (observable state vs 일반 리스트)
용어 정확도	🔄 용어만 조금 다듬으면 완벽




